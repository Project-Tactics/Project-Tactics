#include "SDLClickBackend.h"

#include "../Click.h"

namespace click {

static KeyboardAction toKeyAction(SDL_Keycode sdlKey) {
	switch (sdlKey) {
	case SDLK_UNKNOWN			: return KeyboardAction::KeyUnknown;
	case SDLK_RETURN			: return KeyboardAction::KeyReturn;
	case SDLK_ESCAPE			: return KeyboardAction::KeyEscape;
	case SDLK_BACKSPACE			: return KeyboardAction::KeyBackspace;
	case SDLK_TAB				: return KeyboardAction::KeyTab;
	case SDLK_SPACE				: return KeyboardAction::KeySpace;
	case SDLK_EXCLAIM			: return KeyboardAction::KeyExclaim;
	case SDLK_QUOTEDBL			: return KeyboardAction::KeyQuotedbl;
	case SDLK_HASH				: return KeyboardAction::KeyHash;
	case SDLK_PERCENT			: return KeyboardAction::KeyPercent;
	case SDLK_DOLLAR			: return KeyboardAction::KeyDollar;
	case SDLK_AMPERSAND			: return KeyboardAction::KeyAmpersand;
	case SDLK_QUOTE				: return KeyboardAction::KeyQuote;
	case SDLK_LEFTPAREN			: return KeyboardAction::KeyLeftparen;
	case SDLK_RIGHTPAREN		: return KeyboardAction::KeyRightparen;
	case SDLK_ASTERISK			: return KeyboardAction::KeyAsterisk;
	case SDLK_PLUS				: return KeyboardAction::KeyPlus;
	case SDLK_COMMA				: return KeyboardAction::KeyComma;
	case SDLK_MINUS				: return KeyboardAction::KeyMinus;
	case SDLK_PERIOD			: return KeyboardAction::KeyPeriod;
	case SDLK_SLASH				: return KeyboardAction::KeySlash;
	case SDLK_0					: return KeyboardAction::Key0;
	case SDLK_1					: return KeyboardAction::Key1;
	case SDLK_2					: return KeyboardAction::Key2;
	case SDLK_3					: return KeyboardAction::Key3;
	case SDLK_4					: return KeyboardAction::Key4;
	case SDLK_5					: return KeyboardAction::Key5;
	case SDLK_6					: return KeyboardAction::Key6;
	case SDLK_7					: return KeyboardAction::Key7;
	case SDLK_8					: return KeyboardAction::Key8;
	case SDLK_9					: return KeyboardAction::Key9;
	case SDLK_COLON				: return KeyboardAction::KeyColon;
	case SDLK_SEMICOLON			: return KeyboardAction::KeySemicolon;
	case SDLK_LESS				: return KeyboardAction::KeyLess;
	case SDLK_EQUALS			: return KeyboardAction::KeyEquals;
	case SDLK_GREATER			: return KeyboardAction::KeyGreater;
	case SDLK_QUESTION			: return KeyboardAction::KeyQuestion;
	case SDLK_AT				: return KeyboardAction::KeyAt;
	case SDLK_LEFTBRACKET		: return KeyboardAction::KeyLeftbracket;
	case SDLK_BACKSLASH			: return KeyboardAction::KeyBackslash;
	case SDLK_RIGHTBRACKET		: return KeyboardAction::KeyRightbracket;
	case SDLK_CARET				: return KeyboardAction::KeyCaret;
	case SDLK_UNDERSCORE		: return KeyboardAction::KeyUnderscore;
	case SDLK_BACKQUOTE			: return KeyboardAction::KeyBackquote;
	case SDLK_a					: return KeyboardAction::KeyA;
	case SDLK_b					: return KeyboardAction::KeyB;
	case SDLK_c					: return KeyboardAction::KeyC;
	case SDLK_d					: return KeyboardAction::KeyD;
	case SDLK_e					: return KeyboardAction::KeyE;
	case SDLK_f					: return KeyboardAction::KeyF;
	case SDLK_g					: return KeyboardAction::KeyG;
	case SDLK_h					: return KeyboardAction::KeyH;
	case SDLK_i					: return KeyboardAction::KeyI;
	case SDLK_j					: return KeyboardAction::KeyJ;
	case SDLK_k					: return KeyboardAction::KeyK;
	case SDLK_l					: return KeyboardAction::KeyL;
	case SDLK_m					: return KeyboardAction::KeyM;
	case SDLK_n					: return KeyboardAction::KeyN;
	case SDLK_o					: return KeyboardAction::KeyO;
	case SDLK_p					: return KeyboardAction::KeyP;
	case SDLK_q					: return KeyboardAction::KeyQ;
	case SDLK_r					: return KeyboardAction::KeyR;
	case SDLK_s					: return KeyboardAction::KeyS;
	case SDLK_t					: return KeyboardAction::KeyT;
	case SDLK_u					: return KeyboardAction::KeyU;
	case SDLK_v					: return KeyboardAction::KeyV;
	case SDLK_w					: return KeyboardAction::KeyW;
	case SDLK_x					: return KeyboardAction::KeyX;
	case SDLK_y					: return KeyboardAction::KeyY;
	case SDLK_z					: return KeyboardAction::KeyZ;
	case SDLK_CAPSLOCK			: return KeyboardAction::KeyCapslock;
	case SDLK_F1				: return KeyboardAction::KeyF1;
	case SDLK_F2				: return KeyboardAction::KeyF2;
	case SDLK_F3				: return KeyboardAction::KeyF3;
	case SDLK_F4				: return KeyboardAction::KeyF4;
	case SDLK_F5				: return KeyboardAction::KeyF5;
	case SDLK_F6				: return KeyboardAction::KeyF6;
	case SDLK_F7				: return KeyboardAction::KeyF7;
	case SDLK_F8				: return KeyboardAction::KeyF8;
	case SDLK_F9				: return KeyboardAction::KeyF9;
	case SDLK_F10				: return KeyboardAction::KeyF10;
	case SDLK_F11				: return KeyboardAction::KeyF11;
	case SDLK_F12				: return KeyboardAction::KeyF12;
	case SDLK_PRINTSCREEN		: return KeyboardAction::KeyPrintscreen;
	case SDLK_SCROLLLOCK		: return KeyboardAction::KeyScrolllock;
	case SDLK_PAUSE				: return KeyboardAction::KeyPause;
	case SDLK_INSERT			: return KeyboardAction::KeyInsert;
	case SDLK_HOME				: return KeyboardAction::KeyHome;
	case SDLK_PAGEUP			: return KeyboardAction::KeyPageup;
	case SDLK_DELETE			: return KeyboardAction::KeyDelete;
	case SDLK_END				: return KeyboardAction::KeyEnd;
	case SDLK_PAGEDOWN			: return KeyboardAction::KeyPagedown;
	case SDLK_RIGHT				: return KeyboardAction::KeyRight;
	case SDLK_LEFT				: return KeyboardAction::KeyLeft;
	case SDLK_DOWN				: return KeyboardAction::KeyDown;
	case SDLK_UP				: return KeyboardAction::KeyUp;
	case SDLK_NUMLOCKCLEAR		: return KeyboardAction::KeyNumlockclear;
	case SDLK_KP_DIVIDE			: return KeyboardAction::KeypadDivide;
	case SDLK_KP_MULTIPLY		: return KeyboardAction::KeypadMultiply;
	case SDLK_KP_MINUS			: return KeyboardAction::KeypadMinus;
	case SDLK_KP_PLUS			: return KeyboardAction::KeypadPlus;
	case SDLK_KP_ENTER			: return KeyboardAction::KeypadEnter;
	case SDLK_KP_1				: return KeyboardAction::Keypad1;
	case SDLK_KP_2				: return KeyboardAction::Keypad2;
	case SDLK_KP_3				: return KeyboardAction::Keypad3;
	case SDLK_KP_4				: return KeyboardAction::Keypad4;
	case SDLK_KP_5				: return KeyboardAction::Keypad5;
	case SDLK_KP_6				: return KeyboardAction::Keypad6;
	case SDLK_KP_7				: return KeyboardAction::Keypad7;
	case SDLK_KP_8				: return KeyboardAction::Keypad8;
	case SDLK_KP_9				: return KeyboardAction::Keypad9;
	case SDLK_KP_0				: return KeyboardAction::Keypad0;
	case SDLK_KP_PERIOD			: return KeyboardAction::KeypadPeriod;
	case SDLK_APPLICATION		: return KeyboardAction::KeyApplication;
	case SDLK_POWER				: return KeyboardAction::KeyPower;
	case SDLK_KP_EQUALS			: return KeyboardAction::KeypadEquals;
	case SDLK_F13				: return KeyboardAction::KeyF13;
	case SDLK_F14				: return KeyboardAction::KeyF14;
	case SDLK_F15				: return KeyboardAction::KeyF15;
	case SDLK_F16				: return KeyboardAction::KeyF16;
	case SDLK_F17				: return KeyboardAction::KeyF17;
	case SDLK_F18				: return KeyboardAction::KeyF18;
	case SDLK_F19				: return KeyboardAction::KeyF19;
	case SDLK_F20				: return KeyboardAction::KeyF20;
	case SDLK_F21				: return KeyboardAction::KeyF21;
	case SDLK_F22				: return KeyboardAction::KeyF22;
	case SDLK_F23				: return KeyboardAction::KeyF23;
	case SDLK_F24				: return KeyboardAction::KeyF24;
	case SDLK_EXECUTE			: return KeyboardAction::KeyExecute;
	case SDLK_HELP				: return KeyboardAction::KeyHelp;
	case SDLK_MENU				: return KeyboardAction::KeyMenu;
	case SDLK_SELECT			: return KeyboardAction::KeySelect;
	case SDLK_STOP				: return KeyboardAction::KeyStop;
	case SDLK_AGAIN				: return KeyboardAction::KeyAgain;
	case SDLK_UNDO				: return KeyboardAction::KeyUndo;
	case SDLK_CUT				: return KeyboardAction::KeyCut;
	case SDLK_COPY				: return KeyboardAction::KeyCopy;
	case SDLK_PASTE				: return KeyboardAction::KeyPaste;
	case SDLK_FIND				: return KeyboardAction::KeyFind;
	case SDLK_MUTE				: return KeyboardAction::KeyMute;
	case SDLK_VOLUMEUP			: return KeyboardAction::KeyVolumeup;
	case SDLK_VOLUMEDOWN		: return KeyboardAction::KeyVolumedown;
	case SDLK_KP_COMMA			: return KeyboardAction::KeypadComma;
	case SDLK_KP_EQUALSAS400	: return KeyboardAction::KeypadEqualsas400;
	case SDLK_ALTERASE			: return KeyboardAction::KeyAlterase;
	case SDLK_SYSREQ			: return KeyboardAction::KeySysreq;
	case SDLK_CANCEL			: return KeyboardAction::KeyCancel;
	case SDLK_CLEAR				: return KeyboardAction::KeyClear;
	case SDLK_PRIOR				: return KeyboardAction::KeyPrior;
	case SDLK_RETURN2			: return KeyboardAction::KeyReturn2;
	case SDLK_SEPARATOR			: return KeyboardAction::KeySeparator;
	case SDLK_OUT				: return KeyboardAction::KeyOut;
	case SDLK_OPER				: return KeyboardAction::KeyOper;
	case SDLK_CLEARAGAIN		: return KeyboardAction::KeyClearagain;
	case SDLK_CRSEL				: return KeyboardAction::KeyCrsel;
	case SDLK_EXSEL				: return KeyboardAction::KeyExsel;
	case SDLK_KP_00				: return KeyboardAction::Keypad00;
	case SDLK_KP_000			: return KeyboardAction::Keypad000;
	case SDLK_THOUSANDSSEPARATOR: return KeyboardAction::KeyThousandsseparator;
	case SDLK_DECIMALSEPARATOR	: return KeyboardAction::KeyDecimalseparator;
	case SDLK_CURRENCYUNIT		: return KeyboardAction::KeyCurrencyunit;
	case SDLK_CURRENCYSUBUNIT	: return KeyboardAction::KeyCurrencysubunit;
	case SDLK_KP_LEFTPAREN		: return KeyboardAction::KeypadLeftparen;
	case SDLK_KP_RIGHTPAREN		: return KeyboardAction::KeypadRightparen;
	case SDLK_KP_LEFTBRACE		: return KeyboardAction::KeypadLeftbrace;
	case SDLK_KP_RIGHTBRACE		: return KeyboardAction::KeypadRightbrace;
	case SDLK_KP_TAB			: return KeyboardAction::KeypadTab;
	case SDLK_KP_BACKSPACE		: return KeyboardAction::KeypadBackspace;
	case SDLK_KP_A				: return KeyboardAction::KeypadA;
	case SDLK_KP_B				: return KeyboardAction::KeypadB;
	case SDLK_KP_C				: return KeyboardAction::KeypadC;
	case SDLK_KP_D				: return KeyboardAction::KeypadD;
	case SDLK_KP_E				: return KeyboardAction::KeypadE;
	case SDLK_KP_F				: return KeyboardAction::KeypadF;
	case SDLK_KP_XOR			: return KeyboardAction::KeypadXor;
	case SDLK_KP_POWER			: return KeyboardAction::KeypadPower;
	case SDLK_KP_PERCENT		: return KeyboardAction::KeypadPercent;
	case SDLK_KP_LESS			: return KeyboardAction::KeypadLess;
	case SDLK_KP_GREATER		: return KeyboardAction::KeypadGreater;
	case SDLK_KP_AMPERSAND		: return KeyboardAction::KeypadAmpersand;
	case SDLK_KP_DBLAMPERSAND	: return KeyboardAction::KeypadDblampersand;
	case SDLK_KP_VERTICALBAR	: return KeyboardAction::KeypadVerticalbar;
	case SDLK_KP_DBLVERTICALBAR : return KeyboardAction::KeypadDblverticalbar;
	case SDLK_KP_COLON			: return KeyboardAction::KeypadColon;
	case SDLK_KP_HASH			: return KeyboardAction::KeypadHash;
	case SDLK_KP_SPACE			: return KeyboardAction::KeypadSpace;
	case SDLK_KP_AT				: return KeyboardAction::KeypadAt;
	case SDLK_KP_EXCLAM			: return KeyboardAction::KeypadExclam;
	case SDLK_KP_MEMSTORE		: return KeyboardAction::KeypadMemstore;
	case SDLK_KP_MEMRECALL		: return KeyboardAction::KeypadMemrecall;
	case SDLK_KP_MEMCLEAR		: return KeyboardAction::KeypadMemclear;
	case SDLK_KP_MEMADD			: return KeyboardAction::KeypadMemadd;
	case SDLK_KP_MEMSUBTRACT	: return KeyboardAction::KeypadMemsubtract;
	case SDLK_KP_MEMMULTIPLY	: return KeyboardAction::KeypadMemmultiply;
	case SDLK_KP_MEMDIVIDE		: return KeyboardAction::KeypadMemdivide;
	case SDLK_KP_PLUSMINUS		: return KeyboardAction::KeypadPlusminus;
	case SDLK_KP_CLEAR			: return KeyboardAction::KeypadClear;
	case SDLK_KP_CLEARENTRY		: return KeyboardAction::KeypadClearentry;
	case SDLK_KP_BINARY			: return KeyboardAction::KeypadBinary;
	case SDLK_KP_OCTAL			: return KeyboardAction::KeypadOctal;
	case SDLK_KP_DECIMAL		: return KeyboardAction::KeypadDecimal;
	case SDLK_KP_HEXADECIMAL	: return KeyboardAction::KeypadHexadecimal;
	case SDLK_LCTRL				: return KeyboardAction::KeyLctrl;
	case SDLK_LSHIFT			: return KeyboardAction::KeyLshift;
	case SDLK_LALT				: return KeyboardAction::KeyLalt;
	case SDLK_LGUI				: return KeyboardAction::KeyLgui;
	case SDLK_RCTRL				: return KeyboardAction::KeyRctrl;
	case SDLK_RSHIFT			: return KeyboardAction::KeyRshift;
	case SDLK_RALT				: return KeyboardAction::KeyRalt;
	case SDLK_RGUI				: return KeyboardAction::KeyRgui;
	case SDLK_MODE				: return KeyboardAction::KeyMode;
	case SDLK_AUDIONEXT			: return KeyboardAction::KeyAudionext;
	case SDLK_AUDIOPREV			: return KeyboardAction::KeyAudioprev;
	case SDLK_AUDIOSTOP			: return KeyboardAction::KeyAudiostop;
	case SDLK_AUDIOPLAY			: return KeyboardAction::KeyAudioplay;
	case SDLK_AUDIOMUTE			: return KeyboardAction::KeyAudiomute;
	case SDLK_MEDIASELECT		: return KeyboardAction::KeyMediaselect;
	case SDLK_WWW				: return KeyboardAction::KeyWww;
	case SDLK_MAIL				: return KeyboardAction::KeyMail;
	case SDLK_CALCULATOR		: return KeyboardAction::KeyCalculator;
	case SDLK_COMPUTER			: return KeyboardAction::KeyComputer;
	case SDLK_AC_SEARCH			: return KeyboardAction::KeyAcSearch;
	case SDLK_AC_HOME			: return KeyboardAction::KeyAcHome;
	case SDLK_AC_BACK			: return KeyboardAction::KeyAcBack;
	case SDLK_AC_FORWARD		: return KeyboardAction::KeyAcForward;
	case SDLK_AC_STOP			: return KeyboardAction::KeyAcStop;
	case SDLK_AC_REFRESH		: return KeyboardAction::KeyAcRefresh;
	case SDLK_AC_BOOKMARKS		: return KeyboardAction::KeyAcBookmarks;
	case SDLK_BRIGHTNESSDOWN	: return KeyboardAction::KeyBrightnessdown;
	case SDLK_BRIGHTNESSUP		: return KeyboardAction::KeyBrightnessup;
	case SDLK_DISPLAYSWITCH		: return KeyboardAction::KeyDisplayswitch;
	case SDLK_KBDILLUMTOGGLE	: return KeyboardAction::KeyKbdillumtoggle;
	case SDLK_KBDILLUMDOWN		: return KeyboardAction::KeyKbdillumdown;
	case SDLK_KBDILLUMUP		: return KeyboardAction::KeyKbdillumup;
	case SDLK_EJECT				: return KeyboardAction::KeyEject;
	case SDLK_SLEEP				: return KeyboardAction::KeySleep;
	case SDLK_APP1				: return KeyboardAction::KeyApp1;
	case SDLK_APP2				: return KeyboardAction::KeyApp2;
	case SDLK_AUDIOREWIND		: return KeyboardAction::KeyAudiorewind;
	case SDLK_AUDIOFASTFORWARD	: return KeyboardAction::KeyAudiofastforward;
	case SDLK_SOFTLEFT			: return KeyboardAction::KeySoftleft;
	case SDLK_SOFTRIGHT			: return KeyboardAction::KeySoftright;
	case SDLK_CALL				: return KeyboardAction::KeyCall;
	case SDLK_ENDCALL			: return KeyboardAction::KeyEndcall;
	default						: return KeyboardAction::KeyUnknown;
	}
}

void processSdlEvents(SDL_Event& event) {
	switch (event.type) {
	case SDL_KEYDOWN:
	case SDL_KEYUP	: {
		auto keyAction = toKeyAction(event.key.keysym.sym);
		_processKeyActions(keyAction, event.type == SDL_KEYDOWN);
	}
	}
}

} // namespace click
